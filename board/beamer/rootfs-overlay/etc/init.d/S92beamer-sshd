#!/bin/sh
### BEGIN INIT INFO
# Provides:          beamer-sshd
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Dedicated SSH daemon for Beamer tunneling
# Description:       Starts an isolated sshd instance with /opt/beamer/beamer-ssh-tunnel
### END INIT INFO

NAME=beamer-sshd
DAEMON=/usr/sbin/sshd
PIDFILE=/var/run/$NAME.pid
DESC="Beamer SSH daemon"
CONFIG=/opt/beamer/beamer-ssh-tunnel

test -x $DAEMON || exit 0

# Minimal helpers to avoid dependency on /lib/lsb/init-functions
log_daemon_msg() {
  echo "$1: $2"
}

log_end_msg() {
  if [ "$1" -eq 0 ]; then
    echo "OK"
  else
    echo "FAILED"
  fi
}

log_failure_msg() {
  echo "$@"
}

ensure_hostkeys() {
  # Generate host keys under /opt/beamer if missing
  if [ ! -f /opt/beamer/ssh_host_rsa_key ]; then
    ssh-keygen -q -t rsa -b 3072 -N '' -f /opt/beamer/ssh_host_rsa_key || return 1
  fi
  if [ ! -f /opt/beamer/ssh_host_ed25519_key ]; then
    ssh-keygen -q -t ed25519 -N '' -f /opt/beamer/ssh_host_ed25519_key || return 1
  fi
  chmod 600 /opt/beamer/ssh_host_*_key 2>/dev/null || true
}

case "$1" in
  start)
    log_daemon_msg "Starting $DESC" "$NAME"
    if [ ! -r "$CONFIG" ]; then
      log_failure_msg "$CONFIG not found; cannot start $NAME"
      log_end_msg 1
      exit 1
    fi
    ensure_hostkeys || { log_end_msg 1; exit 1; }
    # Clean up stale pidfile if process not running
    if [ -f "$PIDFILE" ]; then
      oldpid=`cat "$PIDFILE" 2>/dev/null`
      if [ -n "$oldpid" ] && kill -0 "$oldpid" 2>/dev/null; then
        log_failure_msg "$NAME already running (pid $oldpid)"
        log_end_msg 0
        exit 0
      else
        rm -f "$PIDFILE"
      fi
    fi
    # Run sshd in foreground; let start-stop-daemon background and write pidfile
    start-stop-daemon --start --quiet --pidfile $PIDFILE --make-pidfile --background --exec $DAEMON -- \
      -f "$CONFIG" -o PidFile="$PIDFILE"
    status=$?
    log_end_msg $status
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    start-stop-daemon --stop --quiet --pidfile $PIDFILE --retry 5
    status=$?
    # Ensure stale pidfile is removed if process is no longer running
    if [ -f "$PIDFILE" ]; then
      pid=`cat "$PIDFILE" 2>/dev/null`
      if [ -z "$pid" ] || ! kill -0 "$pid" 2>/dev/null; then
        rm -f "$PIDFILE"
      fi
    fi
    log_end_msg $status
    ;;
  restart|force-reload)
    $0 stop
    $0 start
    ;;
  status)
    if [ -f "$PIDFILE" ]; then
      pid=`cat "$PIDFILE" 2>/dev/null`
      if [ -n "$pid" ] && kill -0 "$pid" 2>/dev/null; then
        echo "$NAME is running (pid $pid)"
        exit 0
      else
        echo "$NAME is not running, but pidfile exists"
        exit 1
      fi
    else
      echo "$NAME is not running"
      exit 3
    fi
    ;;
  *)
    echo "Usage: /etc/init.d/$NAME {start|stop|restart|force-reload|status}"
    exit 1
    ;;
esac

exit 0


